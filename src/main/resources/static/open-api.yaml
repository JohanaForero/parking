openapi: 3.0.2
info:
  title: API Documentation
  version: 1.0.0
servers:
  - url: http://localhost:9081/parking/
tags:
  - name: Parking
    description: Endpoints for user authentication and authorization
paths:
  /entrance:
    post:
      tags:
        - Parking
      summary: Register vehicle entry
      description: Register vehicle entry
      operationId: RegisterVehicleEntry
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParkingEntranceRequest'
      responses:
        200:
          description: The vehicle has entered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParkingEntranceResponse'
        400:
          description: Bad Request - If the resource is misspelled (badly constructed URI) If the data in the request is not correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
  /departure:
    post:
      tags:
        - Parking
      summary: Register vehicle exit
      description: Register vehicle exit
      operationId: RegisterVehicleExit
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParkingDepartureRequest'
      responses:
        200:
          description: The vehicle has exited successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParkingDepartureResponse'
        400:
          description: Bad Request - If the resource is misspelled (badly constructed URI) If the data in the request is not correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ErrorObject:
      type: object
      additionalProperties: false
      properties:
        message:
          type: string
          description: Error message (detailed description)
          example: Invalid Request. Please, check the data in the request (QueryString Parameters and/or Body).
      description: Error details
      example:
        message: Invalid Request. Please, check the data in the request (QueryString Parameters and/or Body).
    ParkingEntranceRequest:
      required:
        - licensePlate
        - parkingLotId
      type: object
      description: Data required to enter a vehicle into the parking lot
      additionalProperties: false
      properties:
        licensePlate:
          $ref: '#/components/schemas/licensePlate'
        parkingLotId:
          $ref: '#/components/schemas/parkingLotId'
    ParkingEntranceResponse:
      required:
        - id
      type: object
      additionalProperties: false
      description: Response when a vehicle successfully enters the parking lot
      properties:
        id:
          type: integer
          format: int64
          description: record id
          example: 123456
    ParkingDepartureRequest:
      required:
        - licensePlate
        - parkingLotId
      type: object
      description: Data required to exit a vehicle into the parking lot
      additionalProperties: false
      properties:
        licensePlate:
          $ref: '#/components/schemas/licensePlate'
        parkingLotId:
          $ref: '#/components/schemas/parkingLotId'
    ParkingDepartureResponse:
      required:
        - totalPaid
      type: object
      additionalProperties: false
      description: Response when a vehicle successfully exits the parking lot
      properties:
        totalPaid:
          type: string
          description: total to paid
          example: 10,000.00
    licensePlate:
      type: string
      maxLength: 6
      pattern: ^[a-zA-Z0-9]*$
      description: Vehicle license plate
      example: ABC123
    parkingLotId:
      type: integer
      format: int64
      description: Parking lot id
      example: 123
