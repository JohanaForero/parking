openapi: 3.0.2
info:
  title: API Documentation
  version: 1.0.0
servers:
  - url: http://localhost:9081/parking/
tags:
  - name: Parking
    description: Endpoints for user authentication and authorization
paths:
  /entrance:
    post:
      tags:
        - Parking
      summary: Register vehicle entry
      description: Register vehicle entry with role partner
      operationId: registerVehicleEntry
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParkingEntranceRequest'
      responses:
        200:
          description: The vehicle has entered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParkingEntranceResponse'
        400:
          description: Bad Request - If the resource is misspelled (badly constructed URI) If the data in the request is not correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
  /departure:
    post:
      tags:
        - Parking
      summary: Register vehicle exit
      description: Register vehicle exit
      operationId: registerVehicleExit
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParkingEntranceRequest'
      responses:
        200:
          description: The vehicle has exited successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParkingDepartureResponse'
        400:
          description: Bad Request - If the resource is misspelled (badly constructed URI) If the data in the request is not correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
        403:
          description: Forbidden - If the Token does not have the necessary permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
  /vehicles:
    post:
      tags:
        - Parking
      summary: Vehicles currently in the parking
      description: Get the vehicles in the parking lot currently
      operationId: getVehiclesInParking
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VehiclesRequest'
      responses:
        200:
          description: The vehicles have been listed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehiclesResponse'
        400:
          description: Bad Request - If the data in the request is not correct, return INVALID_PARAMETERS.
            This can occur if the request contains invalid parameters or data that does not meet the required
            constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
        403:
          description: Forbidden - If the Token does not have the necessary permissions, return FORBIDDEN_EXCEPTION.
            The client is not associated with the company and is not allowed to access the resource, return
            CUSTOMER_NOT_ALLOWED.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
        404:
          description: Not Found - If the resource list is empty, return EMPTY_LIST.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
        500:
          description: Internal Server Error - Use it as a General System Error, return INTERNAL_SERVER_ERROR.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
  /email:
    post:
      tags:
        - Parking
      summary: Send email to vehicle owner
      description: Send email to vehicle owner
      operationId: sendEmail
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParkingEmailRequest'
      responses:
        200:
          description: Email was sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParkingEmailResponse'
        400:
          description: Bad Request - If the resource is misspelled (badly constructed URI) If the data in the request is not correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
  /centralParking/:
    post:
      tags:
        - Parking
      summary: Create Parking
      description: Create parking only with the administrator role
      operationId: createParking
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParkingRequest'
      responses:
        200:
          description: The parking has entered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParkingResponse'
        400:
          description: Bad Request - If the resource is misspelled (badly constructed URI) If the data
            in the request is not correct.
            / If the parking name exists, return ParkingNameAlreadyExistsException.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
    patch:
      tags:
        - Parking
      summary: Update Parking Partially
      description: Update specific fields of an existing parking
      operationId: updateParkingPartially
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateParkingRequest'
      responses:
        204:
          description: The parking has been updated successfully
        400:
          description: Bad Request - If the resource is misspelled (badly constructed URI) or if the data in the request is not correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
        404:
          description: Parking not found
    put:
      tags:
        - Parking
      summary: Update full parking
      description: Completely upgrade a parking
      operationId: updateParking
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateParkingCompleteRequest'
      responses:
        204:
          description: The parking has been updated successfully
        400:
          description: Bad Request - If the resource is misspelled (badly constructed URI) or if the data in the request is not correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
        404:
          description: Parking not found
  /centralParking/parkings:
    get:
      tags:
        - Parking
      summary: Parking available
      description: Get all the parking spaces of the partner who is entering
      operationId: getParkings
      security:
        - bearerAuth: [ ]
      responses:
        200:
          description: The parking have been listed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParkingsResponse'
  /centralParking/parking/{idParking}:
    get:
      tags:
        - Parking
      summary: Get a specific parking
      description: Get the details of a specific parking space by its ID
      operationId: getParkingById
      security:
        - bearerAuth: [ ]
      parameters:
        - name: idParking
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the parking to retrieve
      responses:
        200:
          description: The parking has been retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParkingRequest'
        403:
          description: Forbidden - If the Token does not have the necessary permissions, return FORBIDDEN_EXCEPTION.
            The partner is not associated with the parking and is not allowed to access the resource, return
            USER_NOT_ALLOWED.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
        404:
          description: Parking not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
    delete:
      tags:
        - Parking
      summary: Delete a specific parking
      description: Delete a specific parking space by its ID
      operationId: deleteParkingById
      security:
        - bearerAuth: [ ]
      parameters:
        - name: idParking
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the parking to delete
      responses:
        204:
          description: The parking has been successfully deleted
        404:
          description: Parking not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
        401:
          description: Unauthorized to delete parking
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    # Properties
    parkingName:
      type: string
      description: Parking name
      example: PARKING LOT HIRE ME
    code:
      type: integer
      format: int64
      description: code of parking lot
      example: 123
    parkingId:
      type: integer
      description: parking id
      example: 123
    costPerHour:
      type: integer
      description: Cost per hour of a parking lot.
    partnerId:
      type: string
      description: Partner id
      example: 123.oser.Avb
    numberOfParkingLots:
      type: integer
      description: Number of parking lots within a parking lot.
      example: 100

    # Objects
    ErrorObject:
      type: object
      additionalProperties: false
      properties:
        message:
          type: string
          description: Error message (detailed description)
          example: Invalid Request. Please, check the data in the request (QueryString Parameters and/or Body).
      description: Error details
      example:
        message: Invalid Request. Please, check the data in the request (QueryString Parameters and/or Body).
    ParkingEntranceRequest:
      required:
        - licensePlate
        - code
        - parkingId
      type: object
      description: Data required to enter a vehicle into the parking lot
      additionalProperties: false
      properties:
        licensePlate:
          $ref: '#/components/schemas/licensePlate'
        code:
          type: integer
          format: int64
          description: code of parking lot
          example: 123
        parkingId:
          $ref: '#/components/schemas/parkingId'
    ParkingEntranceResponse:
      required:
        - id
      type: object
      additionalProperties: false
      description: Response when a vehicle successfully enters the parking lot
      properties:
        id:
          type: integer
          format: int64
          description: record id
          example: 123456
    ParkingDepartureRequest:
      required:
        - licensePlate
        - parkingId
        - code
      type: object
      description: Data required to exit a vehicle into the parking lot
      additionalProperties: false
      properties:
        licensePlate:
          $ref: '#/components/schemas/licensePlate'
        parkingLotId:
          $ref: '#/components/schemas/parkingLotId'
        code:
          $ref: '#/components/schemas/code'
    ParkingDepartureResponse:
      required:
        - totalPaid
      type: object
      additionalProperties: false
      description: Response when a vehicle successfully exits the parking lot
      properties:
        totalPaid:
          type: string
          description: total to paid
          example: 10,000.00
    VehiclesResponse:
      type: object
      required:
        - vehicles
        - paginationResponse
      properties:
        vehicles:
          type: array
          items:
            $ref: '#/components/schemas/VehicleResponse'
          description: List of vehicles in the parking
        paginationResponse:
          $ref: '#/components/schemas/PaginationResponse'
    PaginationResponse:
      type: object
      required:
        - total
        - totalPages
      properties:
        total:
          type: integer
          description: Total of items.
        totalPages:
          type: integer
          description: Total number of pages.
    ParkingEmailRequest:
      required:
        - email
        - licensePlate
        - message
        - parkingName
      type: object
      description: Data required to send a email
      additionalProperties: false
      properties:
        email:
          type: string
          format: email
          description: Email address
          example: test@test.com
        licensePlate:
          $ref: '#/components/schemas/licensePlate'
        message:
          type: string
          description: Email message
          example: Parking lot entry.
        parkingName:
          $ref: '#/components/schemas/parkingName'
    ParkingEmailResponse:
      required:
        - message
      type: object
      additionalProperties: false
      description: Response when an email is sent successfully
      properties:
        message:
          type: string
          description: Email status message
          example: Email sent successfully
    Vehicle:
      required:
        - id
        - licensePlate
        - entranceDate
        - parkingLotId
      type: object
      additionalProperties: false
      description: Response when a vehicle successfully exits the parking lot
      properties:
        id:
          type: integer
          format: int64
          description: Vehicle id
          example: 123
        licensePlate:
          $ref: '#/components/schemas/licensePlate'
        entranceDate:
          type: string
          format: date-time
          description: Date of entry of the vehicle into the parking lot
          example: 2024-07-20T14:30:00Z
        parkingLotId:
          $ref: '#/components/schemas/parkingLotId'
    licensePlate:
      type: string
      maxLength: 6
      pattern: ^[a-zA-Z0-9]*$
      description: Vehicle license plate
      example: ABC123
    parkingLotId:
      type: integer
      format: int64
      description: Parking lot id
      example: 123
    ParkingRequest:
      required:
        - partnerId
        - parkingName
        - costPerHour
        - numberOfParkingLots
      type: object
      description: Data required to create parking
      additionalProperties: false
      properties:
        partnerId:
          $ref: '#/components/schemas/partnerId'
        parkingName:
          $ref: '#/components/schemas/parkingName'
        costPerHour:
          $ref: '#/components/schemas/costPerHour'
        numberOfParkingLots:
          $ref: '#/components/schemas/numberOfParkingLots'
    ParkingResponse:
      required:
        - parkingId
      type: object
      additionalProperties: false
      description: Response successfully and the parking lot Id
      properties:
        parkingId:
          $ref: '#/components/schemas/parkingId'
    ParkingsResponse:
      type: object
      required:
        - parkings
      properties:
        parkings:
          type: array
          description: List of parking
          items:
            $ref: '#/components/schemas/Parking'
    Parking:
      required:
        - parkingId
        - parkingName
      type: object
      description: Data required to list parking
      additionalProperties: false
      properties:
        parkingId:
          $ref: '#/components/schemas/parkingId'
        parkingName:
          $ref: '#/components/schemas/parkingName'
    UpdateParkingRequest:
      required:
        - parkingId
        - costPerHour
      type: object
      description: Data required to update parking
      additionalProperties: false
      properties:
        parkingId:
          $ref: '#/components/schemas/parkingId'
        costPerHour:
          $ref: '#/components/schemas/costPerHour'
    UpdateParkingCompleteRequest:
      required:
        - parkingId
        - partnerId
        - parkingName
        - costPerHour
        - numberOfParkingLots
      type: object
      description: Data required to create parking
      additionalProperties: false
      properties:
        parkingId:
          $ref: '#/components/schemas/parkingId'
        partnerId:
          $ref: '#/components/schemas/partnerId'
        parkingName:
          $ref: '#/components/schemas/parkingName'
        costPerHour:
          $ref: '#/components/schemas/costPerHour'
        numberOfParkingLots:
          $ref: '#/components/schemas/numberOfParkingLots'
    VehiclesRequest:
      required:
        - parkingId
        - paginationRequest
      type: object
      description: Data required to list vehicles
      additionalProperties: false
      properties:
        parkingId:
          $ref: '#/components/schemas/parkingId'
        paginationRequest:
          $ref: '#/components/schemas/PaginationRequest'
    PaginationRequest:
      type: object
      required:
        - page
        - pageSize
      properties:
        page:
          type: integer
          description: Page number to retrieve.
          default: 0
        pageSize:
          type: integer
          description: Number of items per page.
          default: 10
    VehicleResponse:
      required:
        - id
        - licensePlate
        - code
        - entranceDate
      type: object
      additionalProperties: false
      description: Response when a vehicle successfully exits the parking lot
      properties:
        id:
          type: integer
          format: int64
          description: Vehicle id
          example: 123
        licensePlate:
          $ref: '#/components/schemas/licensePlate'
        code:
          $ref: '#/components/schemas/code'
        entranceDate:
          type: string
          format: date-time
          description: Date of entry of the vehicle into the parking lot
          example: 2024-07-20T14:30:00Z
